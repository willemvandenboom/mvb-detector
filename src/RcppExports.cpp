// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_ind_list_Rcpp
Rcpp::List get_ind_list_Rcpp(const Rcpp::IntegerVector regime, const int n_regimes);
RcppExport SEXP _mvb_detector_get_ind_list_Rcpp(SEXP regimeSEXP, SEXP n_regimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type regime(regimeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_regimes(n_regimesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ind_list_Rcpp(regime, n_regimes));
    return rcpp_result_gen;
END_RCPP
}
// sample_r_i_mat
Rcpp::IntegerMatrix sample_r_i_mat(const Rcpp::NumericMatrix U, const Rcpp::NumericMatrix z_min_eta, const Rcpp::NumericVector m_mix, const Rcpp::NumericVector tmp1, const Rcpp::NumericVector tmp2);
RcppExport SEXP _mvb_detector_sample_r_i_mat(SEXP USEXP, SEXP z_min_etaSEXP, SEXP m_mixSEXP, SEXP tmp1SEXP, SEXP tmp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type z_min_eta(z_min_etaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type m_mix(m_mixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type tmp1(tmp1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type tmp2(tmp2SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_r_i_mat(U, z_min_eta, m_mix, tmp1, tmp2));
    return rcpp_result_gen;
END_RCPP
}
// log_hazard_rate_compete
Rcpp::NumericVector log_hazard_rate_compete(const Rcpp::NumericVector alpha);
RcppExport SEXP _mvb_detector_log_hazard_rate_compete(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_hazard_rate_compete(alpha));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihood
double log_likelihood(const Rcpp::IntegerVector n_vec, const Rcpp::NumericMatrix alpha_star, const Rcpp::IntegerVector event, const Rcpp::IntegerVector time_to_event, const Rcpp::LogicalVector cens, const Rcpp::NumericMatrix mu);
RcppExport SEXP _mvb_detector_log_likelihood(SEXP n_vecSEXP, SEXP alpha_starSEXP, SEXP eventSEXP, SEXP time_to_eventSEXP, SEXP censSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type n_vec(n_vecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type alpha_star(alpha_starSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type time_to_event(time_to_eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector >::type cens(censSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood(n_vec, alpha_star, event, time_to_event, cens, mu));
    return rcpp_result_gen;
END_RCPP
}
// log_posterior_unaugmented
double log_posterior_unaugmented(const Rcpp::IntegerVector n_vec, const Rcpp::NumericMatrix alpha_star, const arma::mat beta, const arma::mat X, const Rcpp::IntegerVector time_to_event, const Rcpp::IntegerVector event, const Rcpp::LogicalVector cens, const Rcpp::Function log_prior_n_vec, const double mu_alpha, const double s2_alpha);
RcppExport SEXP _mvb_detector_log_posterior_unaugmented(SEXP n_vecSEXP, SEXP alpha_starSEXP, SEXP betaSEXP, SEXP XSEXP, SEXP time_to_eventSEXP, SEXP eventSEXP, SEXP censSEXP, SEXP log_prior_n_vecSEXP, SEXP mu_alphaSEXP, SEXP s2_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type n_vec(n_vecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type alpha_star(alpha_starSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type time_to_event(time_to_eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector >::type cens(censSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type log_prior_n_vec(log_prior_n_vecSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_alpha(mu_alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type s2_alpha(s2_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_posterior_unaugmented(n_vec, alpha_star, beta, X, time_to_event, event, cens, log_prior_n_vec, mu_alpha, s2_alpha));
    return rcpp_result_gen;
END_RCPP
}
// sample_int
int sample_int(const int n);
RcppExport SEXP _mvb_detector_sample_int(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int(n));
    return rcpp_result_gen;
END_RCPP
}
// sample_z
Rcpp::LogicalVector sample_z(const int n_risk);
RcppExport SEXP _mvb_detector_sample_z(SEXP n_riskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n_risk(n_riskSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_z(n_risk));
    return rcpp_result_gen;
END_RCPP
}
// update_n_vec_global
Rcpp::List update_n_vec_global(Rcpp::IntegerVector n_vec, Rcpp::NumericMatrix alpha_star, Rcpp::LogicalMatrix z_star, const arma::mat beta, const Rcpp::IntegerVector time_to_event, const Rcpp::IntegerVector event, const Rcpp::LogicalVector cens, const arma::mat X, const int n_risk, const int t_max, const Rcpp::Function log_prior_n_vec, const double mu_alpha, const double s2_alpha);
RcppExport SEXP _mvb_detector_update_n_vec_global(SEXP n_vecSEXP, SEXP alpha_starSEXP, SEXP z_starSEXP, SEXP betaSEXP, SEXP time_to_eventSEXP, SEXP eventSEXP, SEXP censSEXP, SEXP XSEXP, SEXP n_riskSEXP, SEXP t_maxSEXP, SEXP log_prior_n_vecSEXP, SEXP mu_alphaSEXP, SEXP s2_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_vec(n_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type alpha_star(alpha_starSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type z_star(z_starSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type time_to_event(time_to_eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector >::type cens(censSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type n_risk(n_riskSEXP);
    Rcpp::traits::input_parameter< const int >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type log_prior_n_vec(log_prior_n_vecSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_alpha(mu_alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type s2_alpha(s2_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_n_vec_global(n_vec, alpha_star, z_star, beta, time_to_event, event, cens, X, n_risk, t_max, log_prior_n_vec, mu_alpha, s2_alpha));
    return rcpp_result_gen;
END_RCPP
}
// update_z_global
Rcpp::List update_z_global(const double log_post, Rcpp::IntegerVector n_vec, Rcpp::NumericMatrix alpha_star, Rcpp::LogicalMatrix z_star, const arma::mat beta, const Rcpp::IntegerVector time_to_event, const Rcpp::IntegerVector event, const Rcpp::LogicalVector cens, const arma::mat X, const int n_risk, const Rcpp::Function log_prior_n_vec, const double mu_alpha, const double s2_alpha);
RcppExport SEXP _mvb_detector_update_z_global(SEXP log_postSEXP, SEXP n_vecSEXP, SEXP alpha_starSEXP, SEXP z_starSEXP, SEXP betaSEXP, SEXP time_to_eventSEXP, SEXP eventSEXP, SEXP censSEXP, SEXP XSEXP, SEXP n_riskSEXP, SEXP log_prior_n_vecSEXP, SEXP mu_alphaSEXP, SEXP s2_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type log_post(log_postSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_vec(n_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type alpha_star(alpha_starSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type z_star(z_starSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type time_to_event(time_to_eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector >::type cens(censSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type n_risk(n_riskSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function >::type log_prior_n_vec(log_prior_n_vecSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_alpha(mu_alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type s2_alpha(s2_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_z_global(log_post, n_vec, alpha_star, z_star, beta, time_to_event, event, cens, X, n_risk, log_prior_n_vec, mu_alpha, s2_alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mvb_detector_get_ind_list_Rcpp", (DL_FUNC) &_mvb_detector_get_ind_list_Rcpp, 2},
    {"_mvb_detector_sample_r_i_mat", (DL_FUNC) &_mvb_detector_sample_r_i_mat, 5},
    {"_mvb_detector_log_hazard_rate_compete", (DL_FUNC) &_mvb_detector_log_hazard_rate_compete, 1},
    {"_mvb_detector_log_likelihood", (DL_FUNC) &_mvb_detector_log_likelihood, 6},
    {"_mvb_detector_log_posterior_unaugmented", (DL_FUNC) &_mvb_detector_log_posterior_unaugmented, 10},
    {"_mvb_detector_sample_int", (DL_FUNC) &_mvb_detector_sample_int, 1},
    {"_mvb_detector_sample_z", (DL_FUNC) &_mvb_detector_sample_z, 1},
    {"_mvb_detector_update_n_vec_global", (DL_FUNC) &_mvb_detector_update_n_vec_global, 13},
    {"_mvb_detector_update_z_global", (DL_FUNC) &_mvb_detector_update_z_global, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_mvb_detector(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
